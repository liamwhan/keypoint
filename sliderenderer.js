let canvas, dpr = 1.0, vw = document.documentElement.clientWidth, vh = document.documentElement.clientHeight, cx, cy;
const padY = 20;
const padX = 20;
const preloadedImages = [];
const preloadedVideos = [];
let renderState = {
    currentLine: 0,
    currentFont: "Arial",
    currentFontSize: "12px",
    lastTextMetrics: undefined
};
function preloadImages(ast) {
    setTimeout(() => {
        const imagePaths = ast.slides.map(s => {
            const imgPaths = s.contents.filter(c => c.type === "Content" && c.contentType === "image").map((c) => c.value);
            return imgPaths;
        }).flat();
        for (const src of imagePaths) {
            const img = document.createElement("img");
            img.setAttribute("src", src);
            img.addEventListener("load", (e) => {
                preloadedImages.push({ src, img });
            });
        }
    }, 1);
}
function preloadVideos(ast) {
    setTimeout(() => {
        const videoPaths = ast.slides.map(s => {
            const vPaths = s.contents.filter(c => c.type === "Content" && c.contentType === "video").map((c) => c.value);
            return vPaths;
        }).flat();
        console.log("Preloading", videoPaths.length, "videos", videoPaths);
        for (const src of videoPaths) {
            const video = document.createElement("video");
            preloadedVideos.push({ src, video });
            video.setAttribute("src", src);
            video.setAttribute("preload", "auto");
        }
    }, 1);
}
function clearRenderState() {
    return renderState = {
        currentLine: 0,
        currentFont: "Arial",
        currentFontSize: "12px",
        lastTextMetrics: undefined
    };
}
function initCanvas() {
    canvas = document.querySelector("#cnv");
    if (canvas === null) {
        console.error("Canvas element not found");
        return;
    }
    dpr = (window.devicePixelRatio === 1) ? 2 : window.devicePixelRatio;
    vw = document.documentElement.clientWidth;
    vh = document.documentElement.clientHeight;
    canvas.width = vw * dpr;
    canvas.height = vh * dpr;
    canvas.style.width = `${vw}px`;
    canvas.style.height = `${vh}px`;
    cx = (canvas.width / 2);
    cy = (canvas.height / 2);
}
function dpiScale(n) {
    return n * dpr;
}
function getCtx() {
    return canvas.getContext("2d");
}
function clear(colour) {
    clearRenderState();
    colour = (colour.substring(0, 1) !== "#") ? `#${colour}` : colour;
    const ctx = getCtx();
    ctx.fillStyle = colour;
    ctx.fillRect(0, 0, canvas.width, canvas.height);
}
function calculateLineOffset(fontSizePx) {
    if (typeof (fontSizePx) === "string")
        fontSizePx = parseInt(fontSizePx.replace("px", ""));
    return renderState.currentLine * fontSizePx;
}
function drawImage(content) {
    const ctx = getCtx();
    const props = content.properties;
    const imagePath = content.value;
    const alignH = props.align;
    const alignV = props.valign;
    const offsetY = props.offset.top;
    const offsetX = props.offset.left;
    const dwp = parseFloat(props.width.replace("%", "")) / 100;
    let dhp = parseFloat(props.height.replace("%", "")) / 100;
    if (dhp === 1 && dwp !== 1)
        dhp = dwp;
    let x, y;
    const { img } = preloadedImages.find(i => i.src === imagePath);
    const { naturalWidth: nw, naturalHeight: nh } = img;
    const dw = nw * dwp;
    const dh = nh * dhp;
    if (alignH === "center") {
        x = cx - (dw / 2) + offsetX;
    }
    else if (alignH === "left") {
        x = padX + offsetX;
    }
    else {
        x = canvas.width - dw + offsetX;
    }
    if (alignV === "center") {
        y = cy - (dh / 2) + offsetY + calculateLineOffset(renderState.currentFontSize);
    }
    else if (alignV === "top") {
        y = padY + offsetY + calculateLineOffset(renderState.currentFontSize);
    }
    else {
        y = canvas.height - dh - padY + offsetY + calculateLineOffset(renderState.currentFontSize);
    }
    ctx.drawImage(img, x, y, dw, dh);
}
function videoTimer(e) {
    const video = this;
    if (video.paused || video.ended)
        return;
    const ctx = getCtx();
    ctx.drawImage(video, 0, 0, video.videoWidth * 0.3, video.videoHeight * 0.3);
    window.requestAnimationFrame(videoTimer.bind(this));
}
function drawVideo(content) {
    const ctx = getCtx();
    const props = content.properties;
    const videoPath = content.value;
    const alignH = props.align;
    const alignV = props.valign;
    const offsetY = props.offset.top;
    const offsetX = props.offset.left;
    let x, y;
    const { video } = preloadedVideos.find(i => i.src === videoPath);
    video.addEventListener("play", videoTimer);
    video.play();
}
function drawText(content) {
    const ctx = getCtx();
    const props = content.properties;
    const text = content.value;
    const font = renderState.currentFont = props.font;
    const fontSize = renderState.currentFontSize = props["font-size"];
    const fontSizePx = parseInt(fontSize.replace("px", ""));
    const colour = "#" + props["font-color"];
    const alignH = props.align;
    const alignV = props.valign;
    const offsetY = props.offset.top;
    const offsetX = props.offset.left;
    ctx.font = `${fontSize} ${font}`;
    ctx.fillStyle = colour;
    ctx.textBaseline = "bottom";
    ctx.textAlign = alignH;
    const tm = ctx.measureText(text);
    const th = tm.actualBoundingBoxAscent;
    let x, y;
    if (alignH === "center") {
        x = cx + offsetX;
    }
    else if (alignH === "right") {
        x = tm.width + (canvas.width - tm.width) - padX + offsetX;
    }
    else {
        x = padX + offsetX;
    }
    if (alignV === "center") {
        y = cy + (th / 2) + calculateLineOffset(fontSizePx) + offsetY;
    }
    else if (alignV === "bottom") {
        y = canvas.height - padY + calculateLineOffset(fontSizePx) + offsetY;
    }
    else {
        y = padY + tm.actualBoundingBoxAscent + calculateLineOffset(fontSizePx) + offsetY;
    }
    ctx.fillText(text, x, y);
    renderState.currentLine++;
}
function renderSlide(slide) {
    initCanvas();
    clear(slide.properties.background);
    for (let c of slide.contents) {
        if (c.type === "Content") {
            switch (c.contentType) {
                case "string":
                    drawText(c);
                    break;
                case "image":
                    drawImage(c);
                    break;
                case "video":
                    drawVideo(c);
                    break;
                default:
                    break;
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,