let canvas, dpr = 1.0, vw = document.documentElement.clientWidth, vh = document.documentElement.clientHeight, cx, cy;
const padY = 20;
const padX = 20;
let renderState = {
    currentLine: 0,
    currentFont: "Arial",
    currentFontSize: "12px",
    lastTextMetrics: undefined
};
function clearRenderState() {
    return renderState = {
        currentLine: 0,
        currentFont: "Arial",
        currentFontSize: "12px",
        lastTextMetrics: undefined
    };
}
function initCanvas() {
    canvas = document.querySelector("#cnv");
    if (canvas === null) {
        console.error("Canvas element not found");
        return;
    }
    dpr = (window.devicePixelRatio === 1) ? 2 : window.devicePixelRatio;
    vw = document.documentElement.clientWidth;
    vh = document.documentElement.clientHeight;
    canvas.width = vw * dpr;
    canvas.height = vh * dpr;
    canvas.style.width = `${vw}px`;
    canvas.style.height = `${vh}px`;
    cx = (canvas.width / 2);
    cy = (canvas.height / 2);
}
function dpiScale(n) {
    return n * dpr;
}
function getCtx() {
    return canvas.getContext("2d");
}
function clear(colour) {
    clearRenderState();
    colour = (colour.substring(0, 1) !== "#") ? `#${colour}` : colour;
    const ctx = getCtx();
    ctx.fillStyle = colour;
    ctx.fillRect(0, 0, canvas.width, canvas.height);
}
function calculateLineOffset(fontSizePx) {
    if (typeof (fontSizePx) === "string")
        fontSizePx = parseInt(fontSizePx.replace("px", ""));
    return renderState.currentLine * fontSizePx;
}
function drawImage(content) {
    const ctx = getCtx();
    const props = content.properties;
    const imagePath = props.path;
    const alignH = props.align;
    const alignV = props.valign;
    const offsetY = props.offset.top;
    const offsetX = props.offset.left;
    const dwp = parseFloat(props.width.replace("%", "")) / 100;
    let dhp = parseFloat(props.height.replace("%", "")) / 100;
    if (dhp === 1 && dwp !== 1)
        dhp = dwp;
    let x, y;
    const img = document.createElement("img");
    img.setAttribute("src", imagePath);
    img.addEventListener("load", (e) => {
        const { naturalWidth: nw, naturalHeight: nh } = img;
        const dw = nw * dwp;
        const dh = nh * dhp;
        if (alignH === "center") {
            x = cx - (dw / 2) + offsetX;
        }
        else if (alignH === "left") {
            x = padX + offsetX;
        }
        else {
            x = canvas.width - dw + offsetX;
        }
        if (alignV === "center") {
            y = cy - (dh / 2) + offsetY + calculateLineOffset(renderState.currentFontSize);
        }
        else if (alignV === "top") {
            y = padY + offsetY + calculateLineOffset(renderState.currentFontSize);
        }
        else {
            y = canvas.height - dh - padY + offsetY + calculateLineOffset(renderState.currentFontSize);
        }
        ctx.drawImage(img, x, y, dw, dh);
    });
}
function drawText(content) {
    const ctx = getCtx();
    const props = content.properties;
    const text = content.value;
    const font = renderState.currentFont = props.font;
    const fontSize = renderState.currentFontSize = props["font-size"];
    const fontSizePx = parseInt(fontSize.replace("px", ""));
    const colour = "#" + props["font-color"];
    const alignH = props.align;
    const alignV = props.valign;
    const offsetY = props.offset.top;
    const offsetX = props.offset.left;
    ctx.font = `${fontSize} ${font}`;
    ctx.fillStyle = colour;
    ctx.textBaseline = "bottom";
    ctx.textAlign = alignH;
    const tm = ctx.measureText(text);
    const th = tm.actualBoundingBoxAscent;
    let x, y;
    if (alignH === "center") {
        x = cx + offsetX;
    }
    else if (alignH === "right") {
        x = tm.width + (canvas.width - tm.width) - padX + offsetX;
    }
    else {
        x = padX + offsetX;
    }
    if (alignV === "center") {
        y = cy + (th / 2) + calculateLineOffset(fontSizePx) + offsetY;
    }
    else if (alignV === "bottom") {
        y = canvas.height - padY + calculateLineOffset(fontSizePx) + offsetY;
    }
    else {
        y = padY + tm.actualBoundingBoxAscent + calculateLineOffset(fontSizePx) + offsetY;
    }
    ctx.fillText(text, x, y);
    renderState.currentLine++;
}
function renderSlide(slide) {
    initCanvas();
    clear(slide.properties.background);
    for (let c of slide.contents) {
        if (c.type === "Content") {
            switch (c.contentType) {
                case "string":
                    drawText(c);
                    break;
                case "image":
                    drawImage(c);
                    break;
                default:
                    break;
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2xpZGVSZW5kZXJlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlNsaWRlUmVuZGVyZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSSxNQUF3QixFQUN4QixHQUFHLEdBQVcsR0FBRyxFQUNqQixFQUFFLEdBQVksUUFBUSxDQUFDLGVBQWUsQ0FBQyxXQUFXLEVBQ2xELEVBQUUsR0FBWSxRQUFRLENBQUMsZUFBZSxDQUFDLFlBQVksRUFDbkQsRUFBUyxFQUNULEVBQVMsQ0FBQztBQUVkLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQztBQUNoQixNQUFNLElBQUksR0FBRyxFQUFFLENBQUM7QUFJaEIsSUFBSSxXQUFXLEdBQXFCO0lBQ2hDLFdBQVcsRUFBRSxDQUFDO0lBQ2QsV0FBVyxFQUFFLE9BQU87SUFDcEIsZUFBZSxFQUFFLE1BQU07SUFDdkIsZUFBZSxFQUFFLFNBQVM7Q0FDN0IsQ0FBQTtBQUVELFNBQVMsZ0JBQWdCO0lBRXJCLE9BQU8sV0FBVyxHQUFHO1FBQ2pCLFdBQVcsRUFBRSxDQUFDO1FBQ2QsV0FBVyxFQUFFLE9BQU87UUFDcEIsZUFBZSxFQUFFLE1BQU07UUFDdkIsZUFBZSxFQUFFLFNBQVM7S0FDN0IsQ0FBQTtBQUNMLENBQUM7QUFFRCxTQUFTLFVBQVU7SUFFZixNQUFNLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQXNCLENBQUM7SUFDN0QsSUFBSSxNQUFNLEtBQUssSUFBSSxFQUNuQjtRQUNJLE9BQU8sQ0FBQyxLQUFLLENBQUMsMEJBQTBCLENBQUMsQ0FBQztRQUMxQyxPQUFPO0tBQ1Y7SUFDRCxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDO0lBQ3BFLEVBQUUsR0FBRyxRQUFRLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQztJQUMxQyxFQUFFLEdBQUcs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