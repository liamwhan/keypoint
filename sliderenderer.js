window.PS.Subscribe(Channel.KEYDOWN, "SlideRenderer", (key, KeyState) => {
    if (key === " ") {
    }
});
let canvas, dpr = 1.0, vw = document.documentElement.clientWidth, vh = document.documentElement.clientHeight, cx, cy;
const padY = 20;
const padX = 20;
const preloadedImages = [];
const preloadedVideos = [];
let renderState = {
    currentLine: 0,
    currentFont: "Arial",
    currentFontSize: "12px",
    lastTextMetrics: undefined,
    activeSlide: undefined
};
function preloadImages(ast) {
    setTimeout(() => {
        const imagePaths = ast.slides.map(s => {
            const imgPaths = s.contents.filter(c => c.type === "Content" && c.contentType === "image").map((c) => c.value);
            return imgPaths;
        }).flat();
        for (const src of imagePaths) {
            const img = document.createElement("img");
            img.setAttribute("src", src);
            img.addEventListener("load", (e) => {
                preloadedImages.push({ src, img });
            });
        }
    }, 0);
}
function preloadVideos(ast) {
    setTimeout(() => {
        const videoPaths = ast.slides.map(s => {
            const vPaths = s.contents.filter(c => c.type === "Content" && c.contentType === "video").map((c) => c.value);
            return vPaths;
        }).flat();
        console.log("Preloading", videoPaths.length, "videos", videoPaths);
        for (const src of videoPaths) {
            const video = document.createElement("video");
            preloadedVideos.push({ src, video });
            video.setAttribute("src", src);
            video.setAttribute("preload", "auto");
        }
    }, 0);
}
function clearRenderState() {
    const activeSlide = renderState.activeSlide;
    return renderState = {
        currentLine: 0,
        currentFont: "Arial",
        currentFontSize: "12px",
        lastTextMetrics: undefined,
        activeSlide
    };
}
function initCanvas() {
    canvas = document.querySelector("#cnv");
    if (canvas === null) {
        console.error("Canvas element not found");
        return;
    }
    dpr = (window.devicePixelRatio === 1) ? 2 : window.devicePixelRatio;
    vw = document.documentElement.clientWidth;
    vh = document.documentElement.clientHeight;
    canvas.width = vw * dpr;
    canvas.height = vh * dpr;
    canvas.style.width = `${vw}px`;
    canvas.style.height = `${vh}px`;
    cx = (canvas.width / 2);
    cy = (canvas.height / 2);
}
function dpiScale(n) {
    return n * dpr;
}
function getCtx() {
    return canvas.getContext("2d");
}
function clear(colour) {
    clearRenderState();
    colour = (colour.substring(0, 1) !== "#") ? `#${colour}` : colour;
    const ctx = getCtx();
    ctx.fillStyle = colour;
    ctx.fillRect(0, 0, canvas.width, canvas.height);
}
function blend(colour1, a1, colour2, a2) {
    colour1 = (colour1.substring(0, 1) !== "#") ? `#${colour1}` : colour1;
    colour2 = (colour2.substring(0, 1) !== "#") ? `#${colour2}` : colour2;
    const ctx = getCtx();
    ctx.save();
    ctx.globalAlpha = a1;
    ctx.fillStyle = colour1;
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    ctx.globalAlpha = a2;
    ctx.fillStyle = colour2;
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    ctx.restore();
}
function drawImage(content, ctx) {
    ctx = ctx !== null && ctx !== void 0 ? ctx : getCtx();
    const props = content.properties;
    const imagePath = content.value;
    const alignH = props.align;
    const alignV = props.valign;
    const offsetY = props.offset.top;
    const offsetX = props.offset.left;
    const dwp = parseFloat(props.width.replace("%", "")) / 100;
    let dhp = parseFloat(props.height.replace("%", "")) / 100;
    if (dhp === 1 && dwp !== 1)
        dhp = dwp;
    let x, y;
    const { img } = preloadedImages.find(i => i.src === imagePath);
    const { naturalWidth: nw, naturalHeight: nh } = img;
    const dw = nw * dwp;
    const dh = nh * dhp;
    if (alignH === "center") {
        x = cx - (dw / 2) + offsetX;
    }
    else if (alignH === "left") {
        x = padX + offsetX;
    }
    else {
        x = canvas.width - dw + offsetX;
    }
    if (alignV === "center") {
        y = cy - (dh / 2) + offsetY;
    }
    else if (alignV === "top") {
        y = padY + offsetY;
    }
    else {
        y = canvas.height - dh - padY + offsetY;
    }
    ctx.drawImage(img, x, y, dw, dh);
}
function drawVideo(content, ctx, autoplay = true) {
    const videoPath = content.value;
    const { video } = preloadedVideos.find(i => i.src === videoPath);
    const playCallback = () => {
        ctx = ctx !== null && ctx !== void 0 ? ctx : getCtx();
        if (video.paused || video.ended)
            return;
        const { videoWidth: nw, videoHeight: nh } = video;
        const scaleFactor = (canvas.width * 0.8) / nw;
        const dw = nw * scaleFactor;
        const dh = nh * scaleFactor;
        const { x, y } = calculateOrigin(dw, dh, content);
        ctx.drawImage(video, x, y, dw, dh);
        window.requestAnimationFrame(playCallback);
    };
    video.addEventListener("play", playCallback);
    if (autoplay) {
        video.play();
    }
    else {
        video.pause();
        video.currentTime = 0;
        playCallback();
    }
}
function calculateOrigin(iw, ih, content) {
    const props = content.properties;
    const alignH = props.align;
    const alignV = props.valign;
    const offsetY = props.offset.top;
    const offsetX = props.offset.left;
    let x = 0, y = 0;
    if (alignH === "center") {
        x = cx - (iw / 2) + offsetX;
    }
    else if (alignH === "right") {
        x = canvas.width - iw - padX + offsetX;
    }
    else {
        x = padX + offsetX;
    }
    if (alignV === "center") {
        y = cy - (ih / 2) + offsetY;
    }
    else if (alignV === "bottom") {
        y = canvas.height - ih - padY + offsetY;
    }
    else {
        y = padY + offsetY;
    }
    return { x, y };
}
let slideText = [];
function updateSlideTextDimensions(slide) {
    slideText = [];
    for (const c of slide.contents) {
        if (c.type !== "Content" || c.contentType !== "string")
            continue;
        slideText.push(getTextDimensions(c));
    }
}
function getTextDimensions(content) {
    const props = content.properties;
    const { value: text, id } = content;
    const { font, "font-size": fontSize, align, valign, offset } = props;
    const ctx = getCtx();
    ctx.textBaseline = "bottom";
    ctx.font = `${fontSize} ${font}`;
    ctx.textAlign = align;
    const tm = ctx.measureText(text);
    const height = tm.actualBoundingBoxAscent;
    const width = tm.width;
    ctx.restore();
    return { id, text, height, width, align, valign, offset };
}
function getLineOffset(td) {
    if (td.id === 0)
        return 0;
    const prevSameAlign = slideText.filter(t => t.id < td.id && t.valign === td.valign);
    if (!prevSameAlign.length)
        return 0;
    let offset = 0;
    prevSameAlign.map((t) => {
        offset += t.height;
    });
    return offset;
}
function drawHeader(headerName, slide) {
    const ctx = getCtx();
    ctx.save();
    if (!slide.document.headers.hasOwnProperty(headerName))
        return;
    const header = slide.document.headers[headerName];
    if (!header)
        return;
    console.log("drawHeader", header);
    const style = header.contents.find(c => c.type === "StyleBlock");
    if (!style)
        throw new Error("Could not find a style block in the header contents. This is a bug, there should be a default one");
    const fontSize = parseInt(style.properties["font-size"].replace("px", "")) * 2;
    ctx.font = `${fontSize}px ${style.properties.font}`;
    ctx.fillStyle = `#${style.properties["font-color"]}`;
    ctx.textAlign = style.properties.align;
    if (header.properties["page-number"]) {
        ctx.textAlign = "right";
        const text = `${slide.id + 1}`;
        const ptm = ctx.measureText(text);
        const pw = ptm.width;
        const ph = ptm.actualBoundingBoxAscent;
        const x = canvas.width - pw - padX;
        const y = ph + padY;
        console.log("Drawing Page Number", text, "at", `{${x},${y}}`);
        ctx.fillText(text, x, y);
    }
    const contents = header.contents.filter(c => c.type === "Content" && c.contentType === "string");
    const line = 0;
    ctx.textAlign = style.properties.align;
    for (let c of contents) {
        const content = c;
        const text = content.value;
        const htm = ctx.measureText(text);
        const hw = htm.width;
        const hh = htm.actualBoundingBoxAscent;
        const x = padX;
        const y = hh + padY;
        console.log("Drawing Header", text, "at", `{${x},${y}}`);
        ctx.fillText(text, x, y);
    }
    ctx.restore();
}
function drawFooter(headerName, slide) {
    const ctx = getCtx();
    ctx.save();
    if (!slide.document.headers.hasOwnProperty(headerName))
        return;
    const header = slide.document.headers[headerName];
    if (!header)
        return;
    console.log("drawHeader", header);
    const style = header.contents.find(c => c.type === "StyleBlock");
    if (!style)
        throw new Error("Could not find a style block in the header contents. This is a bug, there should be a default one");
    const fontSize = parseInt(style.properties["font-size"].replace("px", "")) * 2;
    ctx.font = `${fontSize}px ${style.properties.font}`;
    ctx.fillStyle = `#${style.properties["font-color"]}`;
    ctx.textAlign = style.properties.align;
    if (header.properties["page-number"]) {
        ctx.textAlign = "right";
        const text = `${slide.id + 1}`;
        const ptm = ctx.measureText(text);
        const pw = ptm.width;
        const ph = ptm.actualBoundingBoxAscent;
        const x = canvas.width - pw - padX;
        const y = ph + padY;
        console.log("Drawing Page Number", text, "at", `{${x},${y}}`);
        ctx.fillText(text, x, y);
    }
    const contents = header.contents.filter(c => c.type === "Content" && c.contentType === "string");
    const line = 0;
    ctx.textAlign = style.properties.align;
    for (let c of contents) {
        const content = c;
        const text = content.value;
        const htm = ctx.measureText(text);
        const hw = htm.width;
        const hh = htm.actualBoundingBoxAscent;
        const x = padX;
        const y = hh + padY;
        console.log("Drawing Header", text, "at", `{${x},${y}}`);
        ctx.fillText(text, x, y);
    }
    ctx.restore();
}
function drawText(content, ctx) {
    ctx = ctx !== null && ctx !== void 0 ? ctx : getCtx();
    const props = content.properties;
    const text = content.value;
    const font = renderState.currentFont = props.font;
    const fontSize = renderState.currentFontSize = props["font-size"];
    const fontSizePx = parseInt(fontSize.replace("px", ""));
    const colour = "#" + props["font-color"];
    const alignH = props.align;
    const alignV = props.valign;
    const offsetY = props.offset.top;
    const offsetX = props.offset.left;
    ctx.font = `${fontSize} ${font}`;
    ctx.fillStyle = colour;
    ctx.textBaseline = "bottom";
    ctx.textAlign = alignH;
    const tm = renderState.lastTextMetrics = ctx.measureText(text);
    const th = tm.actualBoundingBoxAscent;
    const td = slideText.find(t => t.id === content.id);
    const lineOffset = getLineOffset(td);
    let x, y;
    if (alignH === "center") {
        x = cx + offsetX;
    }
    else if (alignH === "right") {
        x = tm.width + (canvas.width - tm.width) - padX + offsetX;
    }
    else {
        x = padX + offsetX;
    }
    if (alignV === "center") {
        y = cy + (th / 2)
            + lineOffset
            + offsetY;
    }
    else if (alignV === "bottom") {
        y = canvas.height - padY
            + lineOffset
            + offsetY;
    }
    else {
        y = padY + tm.actualBoundingBoxAscent
            + lineOffset
            + offsetY;
    }
    ctx.fillText(text, x, y);
}
function stopAll() {
    for (const v of preloadedVideos) {
        const { video } = v;
        video.pause();
        video.currentTime = 0;
    }
}
function getPreviousSlide(toSlide) {
    if (!renderState.activeSlide)
        return null;
    return (toSlide.id > renderState.activeSlide.id) ? toSlide.prev : toSlide.next;
}
function renderContents(slide, ctx, autoplay) {
    updateSlideTextDimensions(slide);
    if (slide.properties.header) {
        drawHeader(slide.properties.header, slide);
    }
    ctx = ctx !== null && ctx !== void 0 ? ctx : getCtx();
    for (let c of slide.contents) {
        if (c.type === "Content") {
            switch (c.contentType) {
                case "string":
                    drawText(c, ctx);
                    break;
                case "image":
                    drawImage(c, ctx);
                    break;
                case "video":
                    drawVideo(c, ctx, autoplay);
                    break;
                default:
                    break;
            }
        }
    }
}
function renderClear(s) {
    updateSlideTextDimensions(s);
    clear(s.properties.background);
    if (s.properties.header) {
        drawHeader(s.properties.header, s);
    }
    for (let c of s.contents) {
        if (c.type === "Content") {
            switch (c.contentType) {
                case "string":
                    drawText(c);
                    break;
                case "image":
                    drawImage(c);
                    break;
                case "video":
                    drawVideo(c, undefined, true);
                    break;
                default:
                    break;
            }
        }
    }
}
function transitionTo(slide, from, onComplete) {
    const transition = slide.properties.transition;
    if (from === null || transition.type === "none") {
        renderState.activeSlide = slide;
        onComplete(slide);
        return;
    }
    const prevSlide = from;
    renderState.activeSlide = slide;
    const ctx = getCtx();
    ctx.save();
    let start;
    const af = (t) => {
        if (start === undefined)
            start = t;
        let elasped = t - start;
        if (elasped >= transition.duration) {
            ctx.restore();
            onComplete(slide);
            return;
        }
        const a = elasped / transition.duration;
        const a2 = 1 - a;
        blend(slide.properties.background, a, prevSlide.properties.background, a2);
        ctx.globalAlpha = a2;
        renderContents(prevSlide, ctx, false);
        ctx.globalAlpha = a;
        renderContents(slide, ctx, false);
        window.requestAnimationFrame(af);
    };
    window.requestAnimationFrame(af);
}
function changeSlide(slide) {
    stopAll();
    if (slide === renderState.activeSlide) {
        renderClear(slide);
        return;
    }
    const prev = getPreviousSlide(slide);
    transitionTo(slide, prev, renderClear);
}
//# sourceMappingURL=data:application/json;base64,